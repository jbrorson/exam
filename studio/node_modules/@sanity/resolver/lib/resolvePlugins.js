'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _uniq2 = require('lodash/uniq');

var _uniq3 = _interopRequireDefault(_uniq2);

exports.resolvePlugin = resolvePlugin;
exports.resolvePlugins = resolvePlugins;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _pathExists = require('path-exists');

var _pathExists2 = _interopRequireDefault(_pathExists);

var _readManifest = require('./readManifest');

var _readManifest2 = _interopRequireDefault(_readManifest);

var _promisePropsRecursive = require('promise-props-recursive');

var _promisePropsRecursive2 = _interopRequireDefault(_promisePropsRecursive);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var dirMatcher = /^\.\.?[/\\]?/;

function resolvePlugin(options) {
  var name = options.name,
      basePath = options.basePath,
      parentPluginPath = options.parentPluginPath,
      sync = options.sync;

  var resolver = sync ? function (dir) {
    return dir;
  } : function (dir) {
    return Promise.resolve(dir);
  };
  var parentDir = parentPluginPath || basePath;
  var isDirPlugin = dirMatcher.test(name);

  var pluginName = isDirPlugin ? readPluginName(parentDir, name) : name;

  var manifestDir = isDirPlugin ? resolver(_path2.default.resolve(parentDir, name)) : resolvePluginPath({ name: name, basePath: basePath, parentPluginPath: parentPluginPath }, sync);

  var plugin = { name: pluginName };

  if (sync) {
    var manifest = (0, _readManifest2.default)({
      sync: sync,
      basePath: basePath,
      manifestDir: manifestDir,
      plugin: pluginName
    });

    return {
      name: pluginName,
      manifest: manifest,
      path: manifestDir,
      plugins: resolvePlugins(manifest.plugins || [], {
        sync: sync,
        basePath: basePath,
        parentPluginPath: manifestDir
      })
    };
  }

  return manifestDir.then(function (resolvedPath) {
    return Object.assign(plugin, { path: resolvedPath });
  }).then(function () {
    return (0, _readManifest2.default)({ basePath: basePath, manifestDir: plugin.path, plugin: pluginName });
  }).then(function (manifest) {
    return (0, _promisePropsRecursive2.default)(Object.assign(plugin, {
      manifest: manifest,
      plugins: resolvePlugins(manifest.plugins || [], {
        basePath: basePath,
        parentPluginPath: plugin.path
      })
    }));
  });
}

function resolvePlugins(pluginNames, options) {
  var plugins = pluginNames.map(function (pluginName) {
    return resolvePlugin(Object.assign({ name: pluginName }, options));
  });

  return options.sync ? plugins : Promise.all(plugins);
}

function resolvePluginPath(plugin, sync) {
  var pluginDir = plugin.name[0] === '@' ? plugin.name : 'sanity-plugin-' + plugin.name;

  var locations = [_path2.default.join(plugin.basePath, 'plugins', pluginDir), _path2.default.join(plugin.basePath, 'plugins', plugin.name), _path2.default.join(plugin.basePath, 'node_modules', pluginDir)];

  if (plugin.parentPluginPath) {
    locations.splice(2, 0, _path2.default.join(plugin.parentPluginPath, 'node_modules', pluginDir));
  }

  var currentDir = plugin.basePath;
  while (_path2.default.dirname(currentDir) !== currentDir) {
    currentDir = _path2.default.dirname(currentDir);
    locations.push(_path2.default.join(currentDir, 'node_modules', pluginDir));
  }

  locations = (0, _uniq3.default)(locations);

  if (sync) {
    var location = locations.find(_pathExists2.default.sync);
    if (!location) {
      throw getPluginNotFoundError(plugin.name, locations);
    }

    return location;
  }

  return Promise.all(locations.map(_pathExists2.default)).then(function (matches) {
    return matches.findIndex(Boolean);
  }).then(function (index) {
    if (index === -1) {
      throw getPluginNotFoundError(plugin.name, locations);
    }

    return locations[index];
  });
}

function getPluginNotFoundError(pluginName, locations) {
  var err = new Error(['Plugin "' + pluginName + '" not found.\n', 'Locations tried:\n  * ', locations.join('\n  * ')].join(''));

  err.plugin = pluginName;
  err.locations = locations;

  return err;
}

function readPluginName(parent, dir) {
  var pkgPath = _path2.default.join(parent, dir, 'package.json');
  var manifestPath = _path2.default.join(parent, dir, 'sanity.json');
  var baseError = 'Plugin/project at "' + parent + '" has the path "' + dir + '" as a plugin, but Sanity was not able to load';
  var info = {};
  try {
    info.name = readJson(pkgPath).name.replace(/^sanity-plugin-/, '');
  } catch (err) {
    throw new Error(baseError + ' "' + pkgPath + '" in order to get the plugin name');
  }

  try {
    info.manifest = readJson(manifestPath);
  } catch (err) {
    throw new Error(baseError + ' "' + manifestPath + '" in order to get the plugin parts');
  }

  return info.name;
}

function readJson(file) {
  return JSON.parse(_fs2.default.readFileSync(file, { encoding: 'utf8' }));
}