'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _webpack = require('webpack');

var _webpack2 = _interopRequireDefault(_webpack);

var _parents = require('parents');

var _parents2 = _interopRequireDefault(_parents);

var _resolveFrom = require('resolve-from');

var _resolveFrom2 = _interopRequireDefault(_resolveFrom);

var _webpackIntegration = require('@sanity/webpack-integration');

var _webpackIntegration2 = _interopRequireDefault(_webpackIntegration);

var _extractTextWebpackPlugin = require('@sanity/extract-text-webpack-plugin');

var _extractTextWebpackPlugin2 = _interopRequireDefault(_extractTextWebpackPlugin);

var _postcssPlugins = require('./postcssPlugins');

var _postcssPlugins2 = _interopRequireDefault(_postcssPlugins);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Webpack 2 vs 1
var OccurrenceOrderPlugin = _webpack2.default.optimize.OccurrenceOrderPlugin || _webpack2.default.optimize.OccurenceOrderPlugin;

exports.default = function () {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var env = config.env || 'development';
  var wpIntegrationOptions = { basePath: config.basePath, env: config.env };
  var basePath = config.basePath || process.cwd();
  var skipMinify = config.skipMinify || false;

  var reactPath = _resolveFrom2.default.silent(basePath, 'react');
  var reactDomPath = _resolveFrom2.default.silent(basePath, 'react-dom');
  var missing = [!reactPath && '`react`', !reactDomPath && '`react-dom`'].filter(Boolean);
  if (!reactPath || !reactDomPath) {
    var missingErr = ['Could not find ' + missing.join(', ') + ' dependencies in project directory', 'These need to be declared in `package.json` and be installed for Sanity to work'].join('\n');

    throw new Error(missingErr);
  }

  var babelConfig = tryRead(_path2.default.join(basePath, '.babelrc'));
  var isProd = env === 'production';
  var sanityDev = typeof process.env.SANITY_DEV !== 'undefined'; // eslint-disable-line no-process-env

  var resolvePaths = (0, _parents2.default)(basePath).map(function (dir) {
    return _path2.default.join(dir, 'node_modules');
  });

  var cssExtractor = isProd && new _extractTextWebpackPlugin2.default('css/main.css', { allChunks: true, ignoreOrder: true });

  var cssLoaderLocation = require.resolve('css-loader');
  var baseCssLoader = cssLoaderLocation + '?modules&localIdentName=[name]_[local]_[hash:base64:5]&importLoaders=1';
  var cssLoader = isProd && !skipMinify ? baseCssLoader + '&minimize' : baseCssLoader + '&sourceMap';

  var commonChunkPlugin = (typeof config.commonChunkPlugin === 'undefined' || config.commonChunkPlugin) && new _webpack2.default.optimize.CommonsChunkPlugin('vendor', 'js/vendor.bundle.js');

  // const cssConfigPath = path.join(__dirname, 'postcss.config.js')
  // const cssConfig = JSON.stringify({config: {path: cssConfigPath}})

  return {
    entry: {
      app: [!isProd && require.resolve('react-hot-loader/patch'), require.resolve('normalize.css'), _path2.default.join(__dirname, '..', 'browser', isProd ? 'entry.js' : 'entry-dev.js')].filter(Boolean),
      vendor: ['react', 'react-dom']
    },
    output: {
      path: config.outputPath || _path2.default.join(__dirname, '..', '..', 'dist'),
      filename: 'js/[name].bundle.js',
      publicPath: '/static/'
    },
    resolve: {
      fallback: resolvePaths,
      alias: {
        react: _path2.default.dirname(reactPath),
        'react-dom': _path2.default.dirname(reactDomPath)
      }
    },
    resolveLoader: {
      root: resolvePaths
    },
    module: {
      loaders: [{
        test: /\.jsx?/,
        exclude: function exclude(modPath) {
          if (sanityDev && modPath.includes(['', '@sanity', ''].join(_path2.default.sep))) {
            return false;
          }

          return modPath.includes(['', 'node_modules', ''].join(_path2.default.sep));
        },
        loader: require.resolve('babel-loader'),
        query: babelConfig || {
          presets: [require.resolve('babel-preset-react'), require.resolve('babel-preset-es2015')],
          plugins: [require.resolve('babel-plugin-syntax-class-properties'), require.resolve('babel-plugin-transform-class-properties'), !isProd && require.resolve('react-hot-loader/patch')].filter(Boolean),
          cacheDirectory: true
        }
      }, {
        test: /\.json$/,
        loader: require.resolve('json-loader')
      }, {
        test: /\.css(\?|$)/,
        loader: isProd && cssExtractor.extract([cssLoader, 'postcss-loader']),
        loaders: !isProd && [require.resolve('style-loader'), cssLoader, require.resolve('postcss-loader')]
      }, {
        test: /\.(jpe?g|png|gif|svg|webp|woff|woff2|ttf|eot)$/,
        loader: require.resolve('file-loader'),
        query: {
          name: 'assets/[name]-[hash].[ext]'
        }
      }, _webpackIntegration2.default.getPartLoader(wpIntegrationOptions)]
    },
    profile: config.profile || false,
    plugins: [_webpackIntegration2.default.getEnvPlugin(wpIntegrationOptions), new _webpack2.default.ContextReplacementPlugin(/moment[/\\]locale$/, /en|nb/), cssExtractor, new OccurrenceOrderPlugin(), _webpackIntegration2.default.getPartResolverPlugin(wpIntegrationOptions), commonChunkPlugin].filter(Boolean),
    postcss: (0, _postcssPlugins2.default)({ basePath: basePath })
  };
};

function tryRead(filePath) {
  try {
    var content = _fs2.default.readFileSync(filePath);
    return JSON.parse(content);
  } catch (err) {
    return null;
  }
}